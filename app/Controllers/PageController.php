<?php

namespace App\Controllers;

use App\Core\Template;
use App\Core\Auth;
use App\Models\ContentManager;

class PageController
{
    private $template;
    private $contentManager;
    
    public function __construct()
    {
        $this->template = new Template();
        $this->contentManager = new ContentManager();
    }
    
    public function home()
    {
        try {
            $content = $this->contentManager->getPage('home');
            $posts = $this->contentManager->getAllPosts(3);
            
            if (!$content) {
                $content = $this->getDefaultHomeContent();
            }
            
             $this->template->render('home', [
                'content' => $content,
                'posts' => $posts,
                'title' => $content['meta']['title'] ?? '–ì–æ–¥–æ–≤–∞–Ω—Å–∫–∏–π –ê–Ω–¥—Ä–µ–π - –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
            ]);
        } catch (\Exception $e) {
            return $this->showError($e->getMessage());
        }
    }
    
    public function showPage($pageName)
    {
        try {
            $content = $this->contentManager->getPage($pageName);
            
            if (!$content) {
                return $this->show404();
            }
            
            $specialTemplates = ['about', 'contact', 'articles'];
            if (in_array($pageName, $specialTemplates)) {
                return $this->template->render($pageName, [
                    'content' => $content,
                    'title' => $content['meta']['title'] ?? ucfirst($pageName)
                ]);
            }
            
            $this->template->render('page', [
                'content' => $content,
                'title' => $content['meta']['title'] ?? ucfirst($pageName)
            ]);
        } catch (\Exception $e) {
            return $this->showError($e->getMessage());
        }
    }
    
    public function showArticles()
    {
        try {
            $posts = $this->contentManager->getAllPosts();
            
            $postsWithReadTime = [];
            foreach ($posts as $post) {
                $post['read_time'] = $this->calculateReadTime($post['content'] ?? '');
                $postsWithReadTime[] = $post;
            }
            
            $this->template->render('articles', [
                'posts' => $postsWithReadTime,
                'title' => '–°—Ç–∞—Ç—å–∏ - –ì–æ–¥–æ–≤–∞–Ω—Å–∫–∏–π –ê–Ω–¥—Ä–µ–π'
            ]);
        } catch (\Exception $e) {
            return $this->showError($e->getMessage());
        }
    }
    
    public function showPost($postSlug)
    {
        try {
            $post = $this->contentManager->getPost($postSlug);
            
            if (!$post) {
                return $this->show404();
            }
            
            $this->template->render('post', [
                'post' => $post,
                'title' => $post['meta']['title'] ?? '–°—Ç–∞—Ç—å—è'
            ]);
        } catch (\Exception $e) {
            $this->showError($e->getMessage());
        }
    }
    
    private function calculateReadTime($content)
    {
        $text = strip_tags($content ?? '');
        $wordCount = str_word_count($text);
        $minutes = ceil($wordCount / 200);
        return max(1, $minutes);
    }
    
    private function getDefaultHomeContent()
    {
        return [
            'meta' => [
                'title' => '–ì–æ–¥–æ–≤–∞–Ω—Å–∫–∏–π –ê–Ω–¥—Ä–µ–π - –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
                'description' => '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–≥ –ì–æ–¥–æ–≤–∞–Ω—Å–∫–æ–≥–æ –ê–Ω–¥—Ä–µ—è –æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏'
            ],
            'content' => $this->getDefaultHomeHTML()
        ];
    }
    
    private function getDefaultHomeHTML()
    {
        return '
            <section class="hero-section fade-in-up">
                <div class="hero-content">
                    <h1>–ì–æ–¥–æ–≤–∞–Ω—Å–∫–∏–π –ê–Ω–¥—Ä–µ–π</h1>
                    <p class="subtitle">–ù–∞—á–∏–Ω–∞—é—â–∏–π –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ & IT-—ç–Ω—Ç—É–∑–∏–∞—Å—Ç</p>
                    
                    <div class="main-nav">
                        <a href="/about" class="nav-btn">
                            <div class="nav-icon">
                                <i class="fas fa-user"></i>
                            </div>
                            <span>–û–±–æ –º–Ω–µ</span>
                        </a>
                        <a href="/articles" class="nav-btn">
                            <div class="nav-icon">
                                <i class="fas fa-newspaper"></i>
                            </div>
                            <span>–°—Ç–∞—Ç—å–∏</span>
                        </a>
                        <a href="/contact" class="nav-btn">
                            <div class="nav-icon">
                                <i class="fas fa-envelope"></i>
                            </div>
                            <span>–ö–æ–Ω—Ç–∞–∫—Ç—ã</span>
                        </a>
                        ' . (Auth::check() ? '
                        <a href="/admin.php" class="nav-btn admin-btn">
                            <div class="nav-icon">
                                <i class="fas fa-cog"></i>
                            </div>
                            <span>–ê–¥–º–∏–Ω–∫–∞</span>
                        </a>' : '') . '
                    </div>
                </div>
            </section>

            <div class="profile-card animate-in">
                <div class="profile-header">
                    <h2>–ü—Ä–∏–≤–µ—Ç! üëã</h2>
                    <div class="profile-tagline">–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–¥—Ä–µ–π, –∏ —è —Å–æ–∑–¥–∞—é —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è</div>
                </div>

                <div class="stats-counter">
                    <div class="stat-item">
                        <div class="stat-icon">
                            <i class="fas fa-birthday-cake"></i>
                        </div>
                        <div class="stat-number">17</div>
                        <div class="stat-label">–õ–µ—Ç</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-icon">
                            <i class="fas fa-code"></i>
                        </div>
                        <div class="stat-number">2+</div>
                        <div class="stat-label">–ì–æ–¥–∞ –≤ IT</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-icon">
                            <i class="fas fa-cogs"></i>
                        </div>
                        <div class="stat-number">5+</div>
                        <div class="stat-label">–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–π</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-icon">
                            <i class="fas fa-rocket"></i>
                        </div>
                        <div class="stat-number">10+</div>
                        <div class="stat-label">–ü—Ä–æ–µ–∫—Ç–æ–≤</div>
                    </div>
                </div>

                <div class="content-section">
                    <h3><i class="fas fa-rocket"></i> –û —Å–µ–±–µ</h3>
                    <p>–Ø –Ω–∞—á–∏–Ω–∞—é—â–∏–π –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞, —É–≤–ª–µ—á–µ–Ω–Ω—ã–π —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞—é –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.</p>
                    
                    <div style="text-align: center; margin-top: 2rem;">
                        <a href="/about" class="btn btn-primary">
                            <i class="fas fa-arrow-right"></i> –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–±–æ –º–Ω–µ
                        </a>
                    </div>
                </div>
            </div>';
    }
    
    private function show404()
    {
        http_response_code(404);
        $this->template->render('404', [
            'title' => '404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        ]);
    }
    
    private function showError($message)
    {
        http_response_code(500);
        $this->template->render('error', [
            'title' => '–û—à–∏–±–∫–∞',
            'message' => $message
        ]);
    }
}